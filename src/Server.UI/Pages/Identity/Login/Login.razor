@page "/account/login"
@layout AuthLayout
@using Microsoft.AspNetCore.Authentication
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.SendFactorCode
@using System.ComponentModel.DataAnnotations

@inherits OwningComponentBase
@inject ILogger<Login> Logger
@inject IStringLocalizer<Login> L
@inject IJSRuntime JSRuntime


<PageTitle>@_title</PageTitle>

<div class="d-flex flex-column gap-y-3">
    <div class="d-flex flex-column">
        <EditForm Model="Input"  OnValidSubmit="OnSubmit" FormName="login">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign In"]</MudText>
            <MudText>
                @L["Don't have an account?"] <MudLink Href="@Register.PageUrl" Target="_self">@L["Sign Up"]</MudLink>
            </MudText>
            <!--user name-->
            <MudTextField @bind-Value="Input.UserName" 
                          Label="@L["User name"]"
                          Variant="Variant.Outlined"
                          For="@(() => Input.UserName)"
                          AutoComplete="username"
                          Required="true"
                          RequiredError="@L["User name cannot be empty"]"
                          Class="my-4" />
            <!--password-->
            <MudTextField @bind-Value="Input.Password" 
                          Label="@L["Password"]"
                          Variant="Variant.Outlined"
                          For="@(() => Input.Password)"
                          InputType="@_passwordInputType"
                          AutoComplete="current-password"
                          Required="true"
                          RequiredError="@L["Password cannot be empty"]"
                          Class="my-4"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordIcon"
                          OnAdornmentClick="TogglePasswordVisibility" />

            
            <div Class="d-flex justify-space-between align-center mb-1">
                <MudCheckBox @bind-Value="Input.RememberMe" 
                            For="@(() => Input.RememberMe)"
                            Color="Color.Primary">
                    @L["Remember me"]
                </MudCheckBox>
                <MudLink Href="@Forgot.PageUrl">@L["Forgot password?"]</MudLink>
            </div>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       ButtonType="ButtonType.Submit"
                       FullWidth="true">
                <MudText>@L["Sign In"]</MudText>
            </MudButton>
        </EditForm>

    </div>
    <div class="d-flex flex-column">

        <ExternalLoginPicker />

    </div>
</div>

<script>
    window.submitLoginForm = function (loginData, returnUrl) {
        // Create a form element
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/pages/authentication/login';

        // Add form fields
        const userNameInput = document.createElement('input');
        userNameInput.type = 'hidden';
        userNameInput.name = 'UserName';
        userNameInput.value = loginData.userName;
        form.appendChild(userNameInput);

        const passwordInput = document.createElement('input');
        passwordInput.type = 'hidden';
        passwordInput.name = 'Password';
        passwordInput.value = loginData.password;
        form.appendChild(passwordInput);

        const rememberMeInput = document.createElement('input');
        rememberMeInput.type = 'hidden';
        rememberMeInput.name = 'RememberMe';
        rememberMeInput.value = loginData.rememberMe;
        form.appendChild(rememberMeInput);

        const returnUrlInput = document.createElement('input');
        returnUrlInput.type = 'hidden';
        returnUrlInput.name = 'ReturnUrl';
        returnUrlInput.value = returnUrl;
        form.appendChild(returnUrlInput);

        // Add the form to the body and submit it
        document.body.appendChild(form);
        form.submit();
    };
</script>

@code {
    private UserManager<ApplicationUser> _userManager = null!;
    private SignInManager<ApplicationUser> _signInManager = null!;
    private IdentityRedirectManager _redirectManager = null!;
    public const string PageUrl = "/account/login";
    private string? errorMessage;
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    private string _title = "Sign In";
    private AuthenticationScheme[] externalLogins = [];

    // Password visibility toggle
    private bool _passwordVisible = false;
    private InputType _passwordInputType = InputType.Password;
    private string _passwordIcon = Icons.Material.Filled.VisibilityOff;

    private InputModel Input { get; set; } = new()
    {
        UserName = "administrator",
        Password = "Password123!",
        RememberMe = true
    };

    private void TogglePasswordVisibility()
    {
        _passwordVisible = !_passwordVisible;
        _passwordInputType = _passwordVisible ? InputType.Text : InputType.Password;
        _passwordIcon = _passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    protected override  Task OnInitializedAsync()
    {
        _title = L["Sign In"];
        _userManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        _signInManager = ScopedServices.GetRequiredService<SignInManager<ApplicationUser>>();
        _redirectManager = ScopedServices.GetRequiredService<IdentityRedirectManager>();
        return Task.CompletedTask;
    }


    public async Task OnSubmit()
    {
        // Check if the user exists
        var user = await _userManager.FindByNameAsync(Input.UserName);
        if (user == null)
        {
            errorMessage = L["Error: User does not exist"];
            Snackbar.Add(errorMessage, Severity.Error);
            return;
        }
        else if (!user.IsActive)
        {
            errorMessage = L["Error: Your account is inactive. Please contact support"];
            Snackbar.Add(errorMessage, Severity.Error);
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await _signInManager.CheckPasswordSignInAsync(user, Input.Password, true);
        if (result.Succeeded)
        {
            // Use JavaScript to submit form to backend API for actual login
            try
            {
                var loginData = new
                {
                    UserName = Input.UserName,
                    Password = Input.Password,
                    RememberMe = Input.RememberMe
                };

                await JSRuntime.InvokeVoidAsync("submitLoginForm", loginData, ReturnUrl ?? "/");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error submitting login form");
                errorMessage = L["Error: Login failed"];
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        else if (result.RequiresTwoFactor)
        {
            var factorUser = (await _signInManager.GetTwoFactorAuthenticationUserAsync()) ?? throw new InvalidOperationException("Unable to load two-factor authentication user.");
            var token = await _userManager.GenerateTwoFactorTokenAsync(factorUser, "Email");
            await Mediator.Publish(new SendFactorCodeNotification(factorUser.Email ?? string.Empty, factorUser.UserName ?? string.Empty, token));
            _redirectManager.RedirectTo(LoginWith2fa.PageUrl, new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("{UserName} has locked out.", Input.UserName);
            _redirectManager.RedirectTo(Lockout.PageUrl);
        }
        else if (result.IsNotAllowed)
        {
            errorMessage = L["Error: Your account is not allowed to log in. Please ensure your account has been activated and you have completed all required steps"];
            Snackbar.Add(errorMessage, Severity.Error);
        }
        else
        {
            errorMessage = L["Error: Invalid login attempt"];
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }

    public sealed class InputModel
    {
        [Required(ErrorMessage = "User name cannot be empty")]
        [StringLength(100, ErrorMessage = "Name length can't be more than 100.")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Password cannot be empty")]
        [StringLength(30, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = true;
    }

}