@page "/pages/system/email-templates"
@using CleanArchitecture.Blazor.Application.Common.Interfaces
@inject IStringLocalizer<EmailTemplates> L
@inject IApplicationSettings ApplicationSettings
@inject IWebHostEnvironment HostEnvironment
@using System.IO
@using Scriban
@attribute [Authorize(Policy = Permissions.EmailTemplates.View)]

<PageTitle>@L["Email Templates"]</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
	<MudText Typo="Typo.h4" Class="mb-4">@L["Email Templates Demo"]</MudText>
	<MudText Typo="Typo.body1" Class="mb-6" Color="Color.Default" Style="opacity:0.8;">
		@L["Preview all available email templates in the system."]
	</MudText>

	<MudGrid Spacing="4">
		<!-- Authenticator Code Template -->
		<MudItem xs="12" md="6">
			<MudCard Elevation="2">
				<MudCardHeader>
					<CardHeaderContent>
						<MudStack Row AlignItems="AlignItems.Center" Spacing="2">
							<MudIcon Icon="@Icons.Material.Filled.Security" Color="Color.Primary" />
							<MudText Typo="Typo.h6">@L["Authenticator Code"]</MudText>
						</MudStack>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>
					<MudText Typo="Typo.body2" Class="mb-4">
						@L["Two-factor authentication verification code email"]
					</MudText>
					<MudPaper Elevation="0" Class="pa-4"
							  Style="background-color: var(--mud-palette-background-grey); border:1px solid var(--mud-palette-table-lines);">
						<iframe srcdoc="@GetAuthenticatorTemplate()"
								style="width:100%; height:400px; border: none; background: white;"
								title="Authenticator Code Template"></iframe>
					</MudPaper>
					<MudText Typo="Typo.caption" Class="mt-2" Color="Color.Default" Style="opacity:0.6;">
						<strong>Variables:</strong> app_name, user_name, authenticator_code, company
					</MudText>
				</MudCardContent>
			</MudCard>
		</MudItem>

		<!-- Password Recovery Template -->
		<MudItem xs="12" md="6">
			<MudCard Elevation="2">
				<MudCardHeader>
					<CardHeaderContent>
						<MudStack Row AlignItems="AlignItems.Center" Spacing="2">
							<MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Primary" />
							<MudText Typo="Typo.h6">@L["Password Recovery"]</MudText>
						</MudStack>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>
					<MudText Typo="Typo.body2" Class="mb-4">
						@L["Password reset request email with secure link"]
					</MudText>
					<MudPaper Elevation="0" Class="pa-4"
							  Style="background-color: var(--mud-palette-background-grey); border:1px solid var(--mud-palette-table-lines);">
						<iframe srcdoc="@GetPasswordRecoveryTemplate()"
								style="width:100%; height:400px; border: none; background: white;"
								title="Password Recovery Template"></iframe>
					</MudPaper>
					<MudText Typo="Typo.caption" Class="mt-2" Color="Color.Default" Style="opacity:0.6;">
						<strong>Variables:</strong> user_name, app_name, request_url, company
					</MudText>
				</MudCardContent>
			</MudCard>
		</MudItem>

		<!-- User Activation Template -->
		<MudItem xs="12" md="6">
			<MudCard Elevation="2">
				<MudCardHeader>
					<CardHeaderContent>
						<MudStack Row AlignItems="AlignItems.Center" Spacing="2">
							<MudIcon Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Primary" />
							<MudText Typo="Typo.h6">@L["User Activation"]</MudText>
						</MudStack>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>
					<MudText Typo="Typo.body2" Class="mb-4">@L["Account activation email for new users"]</MudText>
					<MudPaper Elevation="0" Class="pa-4"
							  Style="background-color: var(--mud-palette-background-grey); border:1px solid var(--mud-palette-table-lines);">
						<iframe srcdoc="@GetUserActivationTemplate()"
								style="width:100%; height:400px; border: none; background: white;"
								title="User Activation Template"></iframe>
					</MudPaper>
					<MudText Typo="Typo.caption" Class="mt-2" Color="Color.Default" Style="opacity:0.6;">
						<strong>Variables:</strong> user_name, app_name, activation_url, company
					</MudText>
				</MudCardContent>
			</MudCard>
		</MudItem>

		<!-- Welcome Template -->
		<MudItem xs="12" md="6">
			<MudCard Elevation="2">
				<MudCardHeader>
					<CardHeaderContent>
						<MudStack Row AlignItems="AlignItems.Center" Spacing="2">
							<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary" />
							<MudText Typo="Typo.h6">@L["Welcome"]</MudText>
						</MudStack>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>
					<MudText Typo="Typo.body2" Class="mb-4">@L["Welcome email for newly registered users"]</MudText>
					<MudPaper Elevation="0" Class="pa-4"
							  Style="background-color: var(--mud-palette-background-grey); border:1px solid var(--mud-palette-table-lines);">
						<iframe srcdoc="@GetWelcomeTemplate()"
								style="width:100%; height:400px; border: none; background: white;"
								title="Welcome Template"></iframe>
					</MudPaper>
					<MudText Typo="Typo.caption" Class="mt-2" Color="Color.Default" Style="opacity:0.6;">
						<strong>Variables:</strong> user_name, app_name, login_url, company
					</MudText>
				</MudCardContent>
			</MudCard>
		</MudItem>
	</MudGrid>


</MudContainer>

@code {
	private readonly Dictionary<string, Template> _scribanCache = new();

	private string AppDisplayName => !string.IsNullOrWhiteSpace(ApplicationSettings.AppName) ? ApplicationSettings.AppName : ApplicationSettings.App;

	private Template LoadAndParseTemplate(string fileName)
	{
		if (_scribanCache.TryGetValue(fileName, out var cached)) return cached;
		var path = Path.Combine(HostEnvironment.ContentRootPath, "Resources", "EmailTemplates", fileName);
		if (!File.Exists(path)) return Template.Parse($"<!-- Template {fileName} not found -->");
		var content = File.ReadAllText(path);
		var tmpl = Template.Parse(content);
		_scribanCache[fileName] = tmpl;
		return tmpl;
	}

	private string Render(string fileName, IDictionary<string, object?> model)
	{
		var template = LoadAndParseTemplate(fileName);
		if (template.HasErrors)
		{
			return $"<!-- Parse errors: {string.Join(';', template.Messages.Select(m => m.Message))} -->";
		}
		var script = new Scriban.Runtime.ScriptObject();
		foreach (var kv in model) script.Add(kv.Key, kv.Value);
		var ctx = new TemplateContext();
		ctx.PushGlobal(script);
		return template.Render(ctx);
	}

	private string GetAuthenticatorTemplate()
	{
		var model = new Dictionary<string, object?>
		{
			["user_name"] = "Alice",
			["authenticator_code"] = "123456",
			["company"] = ApplicationSettings.Company,
			["app_name"] = AppDisplayName
		};
		return Render("_authenticatorcode.cshtml", model);
	}

	private string GetPasswordRecoveryTemplate()
	{
		var model = new Dictionary<string, object?>
		{
			["user_name"] = "Alice",
			["company"] = ApplicationSettings.Company,
			["app_name"] = AppDisplayName,
			["request_url"] = (ApplicationSettings.ApplicationUrl?.TrimEnd('/') ?? "https://example.com") + "/reset-password/demo-token"
		};
		return Render("_recoverypassword.cshtml", model);
	}

	private string GetUserActivationTemplate()
	{
		var model = new Dictionary<string, object?>
		{
			["user_name"] = "Alice",
			["company"] = ApplicationSettings.Company,
			["app_name"] = AppDisplayName,
			["activation_url"] = (ApplicationSettings.ApplicationUrl?.TrimEnd('/') ?? "https://example.com") + "/activate/demo-token"
		};
		return Render("_useractivation.cshtml", model);
	}

	private string GetWelcomeTemplate()
	{
		var model = new Dictionary<string, object?>
		{
			["user_name"] = "Alice",
			["company"] = ApplicationSettings.Company,
			["app_name"] = AppDisplayName,
			["login_url"] = (ApplicationSettings.ApplicationUrl?.TrimEnd('/') ?? "https://example.com") + "/login"
		};
		return Render("_welcome.cshtml", model);
	}
}
