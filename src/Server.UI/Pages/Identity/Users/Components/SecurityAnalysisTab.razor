@using CleanArchitecture.Blazor.Application.Features.LoginAudits.DTOs
@using CleanArchitecture.Blazor.Application.Features.LoginAudits.Queries.AnalyzeAccountSecurity
@using CleanArchitecture.Blazor.Application.Features.LoginAudits.Queries.GetSecuritySummary
@using CleanArchitecture.Blazor.Domain.Enums
@inject IStringLocalizer<CleanArchitecture.Blazor.Server.UI.Pages.Identity.Users.Profile> Localizer
@inject ISnackbar Snackbar

<MudGrid>
    <!-- Security Summary Card -->
    <MudItem xs="12" md="6">
        <MudCard Elevation="2" Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Localizer["Security Summary"]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (_securitySummary != null)
                {
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Class="mb-2">@Localizer["Risk Level"]:</MudText>
                            <MudChip T="string" Color="GetRiskLevelColor(_securitySummary.RiskLevel)" Size="MudBlazor.Size.Medium">
                                @_securitySummary.RiskLevel.ToString()
                            </MudChip>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Class="mb-2">@Localizer["Last Login"]:</MudText>
                            <MudText Typo="Typo.body1">
                                @(_securitySummary.LastLoginDate?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")
                            </MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Class="mb-2">@Localizer["New Devices"]:</MudText>
                            <MudText Typo="Typo.body1">@_securitySummary.NewDevicesCount</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Class="mb-2">@Localizer["New IP Addresses"]:</MudText>
                            <MudText Typo="Typo.body1">@_securitySummary.NewIpAddressesCount</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Class="mb-2">@Localizer["Failed Logins (Last 7 Days)"]:</MudText>
                            <MudText Typo="Typo.body1">@_securitySummary.FailedLoginsLast7Days</MudText>
                        </MudItem>
                        @if (_securitySummary.ShouldChangePassword)
                        {
                            <MudItem xs="12">
                                <MudAlert Severity="Severity.Warning" Class="mt-3">
                                    @Localizer["We recommend changing your password due to detected security risks."]
                                </MudAlert>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Small" />
                    <MudText Typo="Typo.body2" Class="ml-3">@Localizer["Loading security summary..."]</MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Analysis Actions -->
    <MudItem xs="12" md="6">
        <MudCard Elevation="2" Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Localizer["Security Analysis"]</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField @bind-Value="_analysisPeriodDays"
                              Label="@Localizer["Analysis Period (Days)"]"
                              Variant="Variant.Outlined"
                              Class="mb-3"
                              InputType="InputType.Number" />
                
                <MudCheckBox T="bool" @bind-Value="_includeFailedLogins"
                            Label="@Localizer["Include Failed Login Analysis"]"
                            Class="mb-3" />
                
                <MudButton Variant="Variant.Filled"
                          Color="Color.Primary"
                          StartIcon="@Icons.Material.Filled.Security"
                          OnClick="RunDetailedAnalysis"
                          Disabled="_isAnalyzing"
                          FullWidth="true">
                    @if (_isAnalyzing)
                    {
                        <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Small" Class="mr-2" />
                        @Localizer["Analyzing..."]
                    }
                    else
                    {
                        @Localizer["Run Detailed Security Analysis"]
                    }
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Security Threats -->
    @if (_securityAnalysis?.SecurityThreats?.Any() == true)
    {
        <MudItem xs="12">
            <MudCard Elevation="2" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localizer["Detected Security Threats"]</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (var threat in _securityAnalysis.SecurityThreats)
                    {
                        <MudAlert Severity="GetThreatSeverity(threat.RiskLevel)" Class="mb-3">
                            <MudText Typo="Typo.subtitle1" Class="font-weight-bold">
                                @threat.Description
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mt-1">
                                @threat.Details
                            </MudText>
                            <MudText Typo="Typo.caption" Class="mt-2">
                                @Localizer["First Detected"]: @threat.FirstDetected.ToString("yyyy-MM-dd HH:mm") |
                                @Localizer["Occurrences"]: @threat.OccurrenceCount
                            </MudText>
                        </MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    }

    <!-- Recommendations -->
    @if (_securityAnalysis?.Recommendations?.Any() == true)
    {
        <MudItem xs="12">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localizer["Security Recommendations"]</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudList T="string">
                        @foreach (var recommendation in _securityAnalysis.Recommendations)
                        {
                            <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                                <MudText>@recommendation</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    [CascadingParameter] private UserProfile? UserProfile { get; set; }

    private SecuritySummaryDto? _securitySummary;
    private SecurityAnalysisDto? _securityAnalysis;
    private bool _isAnalyzing = false;
    private int _analysisPeriodDays = 30;
    private bool _includeFailedLogins = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSecuritySummary();
    }

    private async Task LoadSecuritySummary()
    {
        if (UserProfile?.UserId == null) return;

        try
        {
            var query = new GetSecuritySummaryQuery
            {
                UserId = UserProfile.UserId
            };

            var result = await Mediator.Send(query);
            if (result.Succeeded)
            {
                _securitySummary = result.Data;
            }
            else
            {
                Snackbar.Add($"Error loading security summary: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading security summary: {ex.Message}", Severity.Error);
        }
    }

    private async Task RunDetailedAnalysis()
    {
        if (UserProfile?.UserId == null) return;

        _isAnalyzing = true;
        try
        {
            var query = new AnalyzeAccountSecurityQuery
            {
                UserId = UserProfile.UserId,
                AnalysisPeriodDays = _analysisPeriodDays,
                IncludeFailedLogins = _includeFailedLogins
            };

            var result = await Mediator.Send(query);
            if (result.Succeeded)
            {
                _securityAnalysis = result.Data;
                Snackbar.Add("Security analysis completed successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Error during security analysis: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error during security analysis: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isAnalyzing = false;
        }
    }

    private Color GetRiskLevelColor(SecurityRiskLevel riskLevel)
    {
        return riskLevel switch
        {
            SecurityRiskLevel.Low => Color.Success,
            SecurityRiskLevel.Medium => Color.Warning,
            SecurityRiskLevel.High => Color.Error,
            SecurityRiskLevel.Critical => Color.Error,
            _ => Color.Default
        };
    }

    private Severity GetThreatSeverity(SecurityRiskLevel riskLevel)
    {
        return riskLevel switch
        {
            SecurityRiskLevel.Low => Severity.Info,
            SecurityRiskLevel.Medium => Severity.Warning,
            SecurityRiskLevel.High => Severity.Error,
            SecurityRiskLevel.Critical => Severity.Error,
            _ => Severity.Normal
        };
    }
} 