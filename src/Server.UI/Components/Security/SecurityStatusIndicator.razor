@using CleanArchitecture.Blazor.Application.Features.LoginAudits.DTOs
@using CleanArchitecture.Blazor.Application.Features.LoginAudits.Queries.GetSecuritySummary
@using CleanArchitecture.Blazor.Domain.Enums
@inject IStringLocalizer<SecurityStatusIndicator> Localizer

@if (_securitySummary != null && !_isHidden)
{
    <MudAlert Severity="GetAlertSeverity(_securitySummary.RiskLevel)" 
              Variant="Variant.Outlined"
              Class="@Class"
              ShowCloseIcon="true"
              CloseIconClicked="OnCloseClicked">
        @GetSecurityMessage(_securitySummary)
    </MudAlert>
}


@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public string Class { get; set; } = string.Empty;
    private SecuritySummaryDto? _securitySummary;
    private bool _isLoading = true;
    private bool _isHidden = false;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadSecuritySummary();
        }
    }

    private async Task LoadSecuritySummary()
    {
        _isLoading = true;
        try
        {
            var query = new GetSecuritySummaryQuery { UserId = UserId };
            var result = await Mediator.Send(query);
            
            if (result.Succeeded)
            {
                _securitySummary = result.Data;
            }
            else
            {
                // Silently fail for security summary to avoid UI clutter
                _securitySummary = null;
            }
        }
        catch
        {
            // Silently fail for security summary
            _securitySummary = null;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void OnCloseClicked()
    {
        _isHidden = true;
        StateHasChanged();
    }

    private Severity GetAlertSeverity(SecurityRiskLevel riskLevel)
    {
        return riskLevel switch
        {
            SecurityRiskLevel.Low => Severity.Info,
            SecurityRiskLevel.Medium => Severity.Warning,
            SecurityRiskLevel.High => Severity.Error,
            SecurityRiskLevel.Critical => Severity.Error,
            _ => Severity.Normal
        };
    }

    private string GetSecurityMessage(SecuritySummaryDto summary)
    {
        var messages = new List<string>();

        if (summary.NewIpAddressesCount > 0)
        {
            messages.Add($"{summary.NewIpAddressesCount} new IP address(es)");
        }

        if (summary.NewDevicesCount > 0)
        {
            messages.Add($"{summary.NewDevicesCount} new device(s)");
        }

        if (summary.FailedLoginsLast7Days > 0)
        {
            messages.Add($"{summary.FailedLoginsLast7Days} failed login(s) in last 7 days");
        }

        var baseMessage = string.Join(", ", messages);
        
        if (summary.ShouldChangePassword)
        {
            return $"{baseMessage}. We recommend changing your password.";
        }

        return baseMessage.Any() ? $"Detected: {baseMessage}" : "Security monitoring active";
    }
} 