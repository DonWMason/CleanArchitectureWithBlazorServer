@page "/account/registerconfirmation"
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Server.UI.Pages.Identity.Login

@inherits OwningComponentBase


@inject IStringLocalizer<RegisterConfirmation> L
<PageTitle>@L["Register confirmation"]</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">@L["Register confirmation"]</MudText>

<StatusMessage Message="@statusMessage" Error="@error"/>

@if (EmailConfirmationLink is not null)
{
    <MudText>@L["This app does not currently have a real email sender registered."]  </MudText>
    <MudText>@L["how to configure a real email sender. Normally this would be emailed:"]</MudText>
    <MudButton href="@EmailConfirmationLink">@L["Click here to confirm your account"]</MudButton>
}
else
{
    <MudText Typo="Typo.body1">@L["Please check your email to confirm your account"]</MudText>
}

@code {
    private UserManager<ApplicationUser> _userManager = null!;

    private IdentityRedirectManager redirectManager = null!;
    public const string PageUrl = "/account/registerconfirmation";
    [SupplyParameterFromQuery] private string? EmailConfirmationLink { get; set; }
    private string? statusMessage;
    private bool error = false;

    [SupplyParameterFromQuery] private string? Email { get; set; }



    protected override async Task OnInitializedAsync()
    {

        _userManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        redirectManager = ScopedServices.GetRequiredService<IdentityRedirectManager>();
        if (Email is null)
        {
            redirectManager.RedirectTo("/");
        }

        var user = await _userManager.FindByEmailAsync(Email);
        if (user is null)
        {
            statusMessage = L["Error finding user for unspecified email"];
            error = true;
        }
    }

}