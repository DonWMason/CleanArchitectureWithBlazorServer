@using CleanArchitecture.Blazor.Server.UI.Models.SEO
@using CleanArchitecture.Blazor.Server.UI.Services.SEO
@inject ISeoService SeoService
@inject NavigationManager Navigation
@inject IApplicationSettings ApplicationSettings

<PageTitle>@GetPageTitle()</PageTitle>
<HeadContent>
    @* Basic Meta Tags *@
    <meta name="description" content="@GetDescription()" />
    <meta name="keywords" content="@GetKeywords()" />
    <meta name="author" content="@GetAuthor()" />
    <meta name="robots" content="@GetRobots()" />
    
    @* Canonical URL *@
    <link rel="canonical" href="@GetCanonicalUrl()" />
    
    @* Open Graph Tags *@
    <meta property="og:title" content="@GetPageTitle()" />
    <meta property="og:description" content="@GetDescription()" />
    <meta property="og:type" content="@(Type ?? "website")" />
    <meta property="og:url" content="@Navigation.Uri" />
    <meta property="og:site_name" content="@SiteName" />
    <meta property="og:locale" content="@(Locale ?? SeoSettings.DefaultLocale)" />
    
    @if (!string.IsNullOrEmpty(GetImageUrl()))
    {
        <meta property="og:image" content="@GetFullImageUrl()" />
        <meta property="og:image:alt" content="@GetImageAlt()" />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="630" />
    }
    
    @* Twitter Card Tags *@
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="@GetPageTitle()" />
    <meta name="twitter:description" content="@GetDescription()" />
    
    @if (!string.IsNullOrEmpty(GetImageUrl()))
    {
        <meta name="twitter:image" content="@GetFullImageUrl()" />
        <meta name="twitter:image:alt" content="@GetImageAlt()" />
    }
    
    @* Additional Meta Tags *@
    <meta name="generator" content="Blazor Server" />
    <meta name="application-name" content="@SiteName" />
    <meta name="theme-color" content="#1976d2" />
    
    @* Custom Meta Tags *@
    @if (CustomMeta != null)
    {
        @foreach (var meta in CustomMeta)
        {
            <meta name="@meta.Key" content="@meta.Value" />
        }
    }
    
    @* JSON-LD Structured Data *@
    @if (EnableJsonLd && !NoIndex)
    {
        <script type="application/ld+json">@GetJsonLd()</script>
    }
</HeadContent>

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public string? Keywords { get; set; }
    [Parameter] public string? Author { get; set; }
    [Parameter] public string? ImageUrl { get; set; }
    [Parameter] public string? ImageAlt { get; set; }
    [Parameter] public string? Type { get; set; }
    [Parameter] public string? Robots { get; set; }
    [Parameter] public bool NoIndex { get; set; } = false;
    [Parameter] public string? CanonicalUrl { get; set; }
    [Parameter] public string? Locale { get; set; }
    [Parameter] public string? SiteName { get; set; }
    [Parameter] public Dictionary<string, string>? CustomMeta { get; set; }
    [Parameter] public bool EnableJsonLd { get; set; } = true;
    [Parameter] public object? JsonLdData { get; set; }
    [Parameter] public string? PageName { get; set; }

    private PageSeoData? _pageData;
    private string BaseUrl => Navigation.BaseUri.TrimEnd('/');

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(PageName))
        {
            _pageData = SeoService.GetPageSeoData(PageName);
        }
    }

    private string GetPageTitle()
    {
        return Title ?? _pageData?.Title ?? SeoSettings.DefaultSiteName;
    }

    private string GetDescription()
    {
        return Description ?? _pageData?.Description ?? SeoSettings.DefaultDescription;
    }

    private string GetKeywords()
    {
        return Keywords ?? _pageData?.Keywords ?? SeoSettings.DefaultKeywords;
    }

    private string GetAuthor()
    {
        return Author ?? SeoSettings.DefaultAuthor;
    }

    private string GetRobots()
    {
        if (NoIndex || _pageData?.NoIndex == true)
            return "noindex, nofollow";
        
        return Robots ?? _pageData?.Type == "login" ? "noindex, nofollow" : SeoSettings.DefaultRobots;
    }

    private string GetCanonicalUrl()
    {
        return CanonicalUrl ?? _pageData?.CanonicalUrl ?? Navigation.Uri;
    }

    private string GetImageUrl()
    {
        return ImageUrl ?? _pageData?.ImageUrl ?? SeoSettings.DefaultImage;
    }

    private string GetImageAlt()
    {
        return ImageAlt ?? _pageData?.ImageAlt ?? SeoSettings.DefaultImageAlt;
    }

    private string GetFullImageUrl()
    {
        var imageUrl = GetImageUrl();
        if (string.IsNullOrEmpty(imageUrl))
            return string.Empty;

        return imageUrl.StartsWith("http") ? imageUrl : $"{BaseUrl}/{imageUrl.TrimStart('/')}";
    }

    private string GetJsonLd()
    {
        var data = JsonLdData ?? SeoService.GenerateStructuredData(PageName ?? "default");
        if (data == null)
            return string.Empty;

        try
        {
            return System.Text.Json.JsonSerializer.Serialize(data, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase,
                WriteIndented = false
            });
        }
        catch
        {
            return string.Empty;
        }
    }
}
